basePath: /
definitions:
  model.Collection:
    properties:
      created_at:
        type: string
      description:
        description: Описание коллекции
        type: string
      fields:
        description: JSON с описанием полей коллекции
        type: string
      id:
        type: integer
      is_active:
        description: Активна ли коллекция
        type: boolean
      name:
        description: Название коллекции (например, "users")
        type: string
      project_id:
        type: integer
      updated_at:
        type: string
    type: object
  model.CreateCollectionRequest:
    properties:
      description:
        maxLength: 500
        type: string
      fields:
        additionalProperties: {}
        description: Структура полей
        type: object
      name:
        maxLength: 50
        minLength: 1
        type: string
    required:
    - fields
    - name
    type: object
  model.CreateProjectRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  model.Project:
    properties:
      api_key:
        description: Уникальный ключ для доступа к API проекта
        type: string
      base_url:
        description: https://<api_key>.mockingcode.org
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  model.UpdateProjectRequest:
    properties:
      description:
        maxLength: 500
        type: string
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
host: localhost:8082
info:
  contact:
    email: support@mockingcode.dev
    name: API Support
    url: http://mockingcode.dev/support
  description: Project management service for MockingCode platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://mockingcode.dev/terms/
  title: MockingCode Project Service API
  version: "1.0"
paths:
  /projects:
    get:
      description: Get list of all projects for authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project for authenticated user
      parameters:
      - description: Project data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create new project
      tags:
      - projects
  /projects/{id}:
    delete:
      description: Delete project and all its collections
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: Get specific project by ID
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update project name and description
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Project'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - projects
  /projects/{id}/collections:
    get:
      consumes:
      - application/json
      description: Get list of collections for a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Collection'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get collections for a project
      tags:
      - collections
    post:
      consumes:
      - application/json
      description: Create a new collection
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Collection data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Collection'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create collections for a project
      tags:
      - collections
securityDefinitions:
  BearerAuth:
    description: Enter the token with the `Bearer ` prefix, e.g. "Bearer abcde12345"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
